datasource db {
  provider  = "postgresql"
  url       = env("DEV_DATABASE_URL")
  directUrl = env("DEV_DIRECT_URL")
}

generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = -1
}

model Setting {
  key         String  @id
  value       String
  description String?
}

model Guild {
  guild_id         BigInt       @id
  guild_name       String
  guild_created_at DateTime?
  guild_joined_at  DateTime?
  guild_owner_id   BigInt       @default(0)
  users            GuildUser[]
  cases            Case[]
  snippets         Snippet[]
  notes            Note[]
  reminders        Reminder[]
  emoji_stats      Emoji_Stat[]
}

model User {
  user_id          BigInt      @id
  user_name        String?
  user_bot         Boolean?    @default(false)
  user_created_at  DateTime?
  user_is_afk      Boolean?    @default(false)
  user_afk_reason  String?
  user_afk_since   DateTime?
  guilds           GuildUser[]
  created_cases    Case[]      @relation("Moderator")
  received_cases   Case[]      @relation("User")
  created_snippets Snippet[]
  created_notes    Note[]      @relation("Moderator")
  received_notes   Note[]      @relation("User")
  reminders        Reminder[]
}

model GuildUser {
  guild_id       BigInt
  user_id        BigInt
  user_joined_at DateTime?

  guild Guild @relation(fields: [guild_id], references: [guild_id])
  user  User  @relation(fields: [user_id], references: [user_id])

  @@id([guild_id, user_id])
}

model Case {
  case_id           BigInt    @id @default(autoincrement())
  case_type         String
  case_reason       String
  case_created_at   DateTime? @default(now())
  case_expires_at   DateTime?
  case_moderator    User      @relation("Moderator", fields: [case_moderator_id], references: [user_id])
  case_moderator_id BigInt
  case_user         User      @relation("User", fields: [case_user_id], references: [user_id])
  case_user_id      BigInt
  case_number       Int?
  guild             Guild     @relation(fields: [guild_id], references: [guild_id])
  guild_id          BigInt
}

model Snippet {
  snippet_id         BigInt   @id @default(autoincrement())
  snippet_name       String
  snippet_content    String
  snippet_created_at DateTime @default(now())
  snippet_author     User     @relation(fields: [snippet_author_id], references: [user_id])
  snippet_author_id  BigInt
  guild              Guild    @relation(fields: [guild_id], references: [guild_id])
  guild_id           BigInt
}

model Note {
  note_id           BigInt   @id @default(autoincrement())
  note_content      String
  note_created_at   DateTime @default(now())
  note_moderator    User     @relation("Moderator", fields: [note_moderator_id], references: [user_id])
  note_moderator_id BigInt
  note_user         User     @relation("User", fields: [note_user_id], references: [user_id])
  note_user_id      BigInt
  note_number       Int?
  guild             Guild    @relation(fields: [guild_id], references: [guild_id])
  guild_id          BigInt
}

model Reminder {
  reminder_id         BigInt   @id @default(autoincrement())
  reminder_content    String
  reminder_created_at DateTime @default(now())
  reminder_expires_at DateTime
  reminder_channel_id BigInt
  reminder_user       User     @relation(fields: [reminder_user_id], references: [user_id])
  reminder_user_id    BigInt
  guild               Guild    @relation(fields: [guild_id], references: [guild_id])
  guild_id            BigInt
}

model Emoji_Stat {
  emoji_stat_emoji_id BigInt @id
  emoji_stat_count    BigInt
  guild               Guild  @relation(fields: [guild_id], references: [guild_id])
  guild_id            BigInt
}
